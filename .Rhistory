?str_remove_all
library("stringr")
rs_all <- rs_all %>% mutate(Artist = str_remove_all(Artist, "The"))
rs_all <-rs_all %>% mutate(Song = str_remove_all(Song, "The"))
rs_all <- rs_all %>% mutate(Artist = str_replace_all(Artist, "[&]","and"))
rs_all <- rs_all %>% mutate(Song = str_replace_all(Song, "[&]","and"))
rs_all <- rs_all %>% mutate(Artist = str_remove_all(Artist, "[:punct:]"))
rs_all <- rs_all %>% mutate(Song = str_remove_all(Song, "[:punct:]"))
?str_trim
?str_to_lower
rs_all <- rs_all %>% mutate(Artist = str_to_lower (Artist))
rs_all <- rs_all %>% mutate(Artist = str_trim(Artist))
rs_all <- rs_all %>% mutate(Song = str_to_lower (Song))
rs_all <- rs_all %>% mutate(Song = str_trim(Song))
### Question 4 ----------
# Now that the data have been cleaned, split rs_all into two datasets, one for old and one for new
# Each dataset should have 500 observations and 5 variables
# Use full_join again to merge the old and new datasets by artist and song, and save it to rs_joined
# Read about the "suffix" argument in full_join, and use it to append _Old and _New to year and rank
# rather than the default (x and y)
# Did the string cleaning improve matches? If so, there should be fewer rows of data (fewer duplicates)
# in the new rs_joined compared to the original. Use nrow to check (there should be 799 rows)
#ANSWER
rs_all_NEWdf <- split(rs_all, rs_all$Source)
first_Data <- rs_all_NEWdf[[1]]
second_Data <- rs_all_NEWdf[[2]]
rs_joined <- full_join(first_Data, second_Data, by="Artist", "Song")
rs_joined <- full_join(first_Data, second_Data, by = c ("Artist", "Song"), suffix = c("_Old","_New"))
nrow(rs_joined)
### Question 5 ----------
# Let's clean up rs_joined with the following steps:
# remove the variable "Source"
# remove any rows where Rank_New or Rank_Old is NA (so we have only the songs that appeared in both lists)
# calculate a new variable called "Rank_Change" that subtracts new rank from old rank
# sort by rank change
# Save those changes to rs_joined
# You should now be able to see how each song moved up/down in rankings between the two lists
#ANSWER
rs_joined$Source_New <- NULL
rs_joined$Source_Old <- NULL
rs_joined <- rs_joined %>% drop_na(Rank_New, Rank_Old)
rs_joined <- rs_joined %>% mutate(Rank_Change = floor(Rank_New-Rank_Old))
rs_joined <- rs_joined %>% arrange(Rank_Change)
### Question 6 ----------
# Add a new variable to rs_joined that takes the year and turns it into a decade with "s" at the end
# The new variable should be a factor
# 1971 should be 1970s, 1985 should be 1980s, etc.
# Group by decade and summarize the mean rank_change for songs released in each decade (you don't have to save it)
# Which decade improved the most? 60s and 70s?
#ANSWER
rs_joined$Year_Old_Decade <- rs_joined$Year_Old
rs_joined <- rs_joined %>% mutate(Year_Old_Decade = floor(Year_Old/10)*10, prefix = "s")
rs_joined$Year_Old_Decades <- paste0(rs_joined$Year_Old_Decade, rs_joined$prefix)
rs_joined$Year_New_Decade <- rs_joined$Year_New
rs_joined<- rs_joined %>% mutate(Year_New_Decade = floor(Year_New/10)*10)
rs_joined$Year_New_Decades <- paste0(rs_joined$Year_New_Decade, rs_joined$prefix)
rs_joinedGroupDecade <- rs_joined %>% group_by(Year_New_Decades, Year_Old_Decades) %>% summarise_at(vars(Rank_Change), funs(mean(.,na.rm=TRUE)))
View(rs_joinedGroupDecade)
rs_joined <- rs_joined %>% group_by(Year_New_Decades, Year_Old_Decades) %>% summarise_at(vars(Rank_Change), funs(mean(.,na.rm=TRUE)))
fct_count(rs_joined$Year_New_Decades, sort = T)
fct_count(rs_joined$Year_Old_Decades, sort = T)
rs_joined <- rs_joined %>% mutate(Decade_New = fct_lump(Year_New_Decades, n=3,
other_level = "Other"))
rs_joined <- rs_joined %>% mutate(Decade_Old = fct_lump(Year_Old_Decades, n=3,
other_level = "Other"))
fct_count(rs_joined$Decade_New, prop = T)
#ANSWER
setwd()
top20 <- read.csv("top_20.csv", header = TRUE)
top20 <- tibble(top20)
top20 <- top20 %>% mutate(Release_Date_Parsed = parse_date_time(Release, "dmy"))
#ANSWER
top20 <- top20 %>% pivot_wider(names_from = Style, values_from = Value)
rs_joinedGroupDecade <- rs_joined %>% group_by(Year_New_Decades, Year_Old_Decades) %>% summarise_at(vars(Rank_Change), funs(mean(.,na.rm=TRUE)))
rs_joinedMerged <- left_join(rs_joined, top20, by = c("Artist", "Song"))
View(rs_joined_orig_practice)
View(top20)
View(top20)
View(rs_joined)
View(rs_joined_orig)
View(rs_joined_orig_practice)
View(rs_joined)
View(rs_joined_orig)
View(rs_joined_orig_practice)
View(rs_joinedGroupDecade)
View(rs_new)
View(rs_new_variable)
View(rs_all)
rs_joinedMerged <- left_join(rs_all, top20, by = c("Artist", "Song"))
View(rs_joinedMerged)
rs_joinedMerged <- left_join(top20, rs_joinedMerged, by = c("Artist", "Song"))
View(rs_joinedMerged)
rs_joined <- left_join(top20, rs_joinedMerged, by = c("Artist", "Song"))
rs_joinedMerged <- left_join(top20, rs_joined, by = c("Artist", "Song"))
rs_joinedMerged <- left_join(top20, rs_joined, by = Artist, Song)
rs_joinedMerged <- left_join(top20, rs_joined, by = "Artist", "Song")
View(rs_joinedMerged)
View(rs_joinedMerged)
rs_joinedMerged$Month <- rs_joinedMerged %>% month(Release.x)
rs_joinedMerged$Month <- rs_joinedMerged %>% month(Release.x, label = TRUE)
rs_joinedMerged$Month <- rs_joinedMerged %>% month(Release_Date_Parsed.x, label = TRUE)
rs_joinedMerged$Month <- rs_joinedMerged %>% month(Release_Date_Parsed.x.x, label = TRUE)
rs_joinedMerged$Month <- rs_joinedMerged %>% month(Release_Date_Parsed.x.x, label = FALSE)
rs_joinedMerged$Month <- rs_joinedMerged %>% month(as.POSIXlt//8Release_Date_Parsed.x.x, label = FALSE))
rs_joinedMerged$Month <- rs_joinedMerged %>% month(as.POSIXlt(Release_Date_Parsed.x.x, label = FALSE))
rs_joinedMerged$Month <- rs_joinedMerged %>% month(as.POSIXlt(Release.x.x, label = FALSE))
rs_joinedMerged$Month <- rs_joinedMerged %>% month(as.POSIXlt(Release.x.x, format="%Y/%m/%d"))
rs_joinedMerged <- left_join(top20, rs_joined, by = "Artist", "Song")
rs_joinedMerged$Month <- rs_joinedMerged %>% month(Release.x.x, label = FALSE, abbr = TRUE)
rs_joinedMerged$Month <- month(rs_joinedMerged$Release.x.x label = FALSE, abbr = TRUE)
rs_joinedMerged$Month <- month(rs_joinedMerged$Release.x.x, label = FALSE, abbr = TRUE)
rs_joinedMerged$Month <- month(rs_joinedMerged$Release.x.x, label = FALSE)
rs_joinedMerged$Month <- month(rs_joinedMerged$Release_Date_Parsed.x.x, label = FALSE)
View(rs_joinedMerged)
rs_joinedMerged$Month
View(rs_joinedMerged)
rs_joinedMerged$Month <- month(rs_joinedMerged$Release_Date_Parsed.x.x, label = TRUE)
View(rs_joinedMerged)
rs_joinedMerged$Season <- rs_joinedMerged %>% mutate(rs_joinedMerged = fct_collapse(Month, Spring = c("Mar", "Apr", "May"),
Summer = c("Jun", "Jul", "Aug"), Fall = c("Sep", "Oct", "Nov"), Winter= c("Dec", "Jan", "Feb")))
View(rs_joinedMerged)
fct_count(rs_joinedMerged$Season, sort = T)
fct_count(rs_joinedMerged$Season, prop = T)
ds <- fct_count(rs_joinedMerged$Season, prop = T)
rs_joinedMerged$Season <- rs_joinedMerged %>% mutate(rs_joinedMerged = fct_collapse(Month, Spring = c("Mar", "Apr", "May"),
Summer = c("Jun", "Jul", "Aug"), Fall = c("Sep", "Oct", "Nov"), Winter= c("Dec", "Jan", "Feb")))
fct_count(rs_joinedMerged$Season, sort = TRUE)
?fct_count
rs_joinedMerged$Season <- as.character(rs_joinedMerged$Season)
View(rs_joinedMerged)
rs_joinedMerged$Season <- rs_joinedMerged %>% mutate(rs_joinedMerged = fct_collapse(Month, Spring = c("Mar", "Apr", "May"),
Summer = c("Jun", "Jul", "Aug"), Fall = c("Sep", "Oct", "Nov"), Winter= c("Dec", "Jan", "Feb")))
View(rs_joinedMerged)
rs_joinedMerged <- left_join(top20, rs_joined, by = "Artist", "Song")
rs_joinedMerged$Month <- month(rs_joinedMerged$Release_Date_Parsed.x.x, label = TRUE)
rs_joinedMerged$Season <- rs_joinedMerged %>% mutate(rs_joinedMerged = fct_collapse(Month, Spring = c("Mar", "Apr", "May"),
Summer = c("Jun", "Jul", "Aug"), Fall = c("Sep", "Oct", "Nov"), Winter= c("Dec", "Jan", "Feb")))
View(rs_joinedMerged)
Season <- rs_joinedMerged %>% mutate(rs_joinedMerged = fct_collapse(Month, Spring = c("Mar", "Apr", "May"),
Summer = c("Jun", "Jul", "Aug"), Fall = c("Sep", "Oct", "Nov"), Winter= c("Dec", "Jan", "Feb")))
View(rs_joinedMerged)
#PSYC 259 Homework 3 - Data Structure
#For full credit, provide answers for at least 8/11 questions
#List names of students collaborating with:
### SETUP: RUN THIS BEFORE STARTING ----------
install.packages("rvest")
#Load packages
library(tidyverse)
library(lubridate)
library(rvest)
# Scrape the data for the new rolling stone top 500 list
url <- "https://stuarte.co/2021/2021-full-list-rolling-stones-top-500-songs-of-all-time-updated/"
rs_new <- url %>% read_html() %>% html_nodes(xpath='//*[@id="post-14376"]/div[2]/div[2]/table') %>% html_table() %>% pluck(1)
#Load packages
library(tidyverse)
library(lubridate)
library(rvest)
# Scrape the data for the new rolling stone top 500 list
url <- "https://stuarte.co/2021/2021-full-list-rolling-stones-top-500-songs-of-all-time-updated/"
rs_new <- url %>% read_html() %>% html_nodes(xpath='//*[@id="post-14376"]/div[2]/div[2]/table') %>% html_table() %>% pluck(1)
# Scrape the data for the old rolling stone top 500 list
url_old <- "https://www.cs.ubc.ca/~davet/music/list/Best9.html"
rs_old <- url_old %>% read_html() %>% html_nodes(xpath='/html/body/table[2]') %>% html_table() %>% pluck(1) %>%
select(1, 4, 3, 7) %>% rename(Rank = X1, Artist = X3, Song = X4, Year = X7) %>% filter(Year != "YEAR")
#ANSWER
?full_join
##Does not allow for repeats. No matter how many different ranks are presented for that given artist/song.
rs_joined_orig_practice <- full_join(rs_old, rs_new, by = c("Artist", "Song"))
##Does allow for repeats. No matter how many different ranks are presented for that given artist/song.
rs_joined_orig <- full_join(rs_old, rs_new, by="Song", "Artist")
nrow(rs_joined_orig)
#ANSWER
rs_new_variable <- mutate(rs_new, Source = "New")
rs_old_variable <- mutate(rs_old, Source = "Old")
rs_all <- bind_rows(rs_new_variable, rs_old_variable)
rs_old_variable$Rank <- as.integer(rs_old_variable$Rank)
rs_old_variable$Year <- as.integer (rs_old_variable$Year)
rs_all <- bind_rows(rs_new_variable, rs_old_variable)
#ANSWER
?str_remove_all
library("stringr")
rs_all <- rs_all %>% mutate(Artist = str_remove_all(Artist, "The"))
rs_all <-rs_all %>% mutate(Song = str_remove_all(Song, "The"))
rs_all <- rs_all %>% mutate(Artist = str_replace_all(Artist, "[&]","and"))
rs_all <- rs_all %>% mutate(Song = str_replace_all(Song, "[&]","and"))
rs_all <- rs_all %>% mutate(Artist = str_remove_all(Artist, "[:punct:]"))
rs_all <- rs_all %>% mutate(Song = str_remove_all(Song, "[:punct:]"))
?str_trim
?str_to_lower
rs_all <- rs_all %>% mutate(Artist = str_to_lower (Artist))
rs_all <- rs_all %>% mutate(Artist = str_trim(Artist))
rs_all <- rs_all %>% mutate(Song = str_to_lower (Song))
rs_all <- rs_all %>% mutate(Song = str_trim(Song))
#ANSWER
rs_all_NEWdf <- split(rs_all, rs_all$Source)
first_Data <- rs_all_NEWdf[[1]]
second_Data <- rs_all_NEWdf[[2]]
rs_joined <- full_join(first_Data, second_Data, by="Artist", "Song")
rs_joined <- full_join(first_Data, second_Data, by = c ("Artist", "Song"), suffix = c("_Old","_New"))
nrow(rs_joined)
#ANSWER
rs_joined$Source_New <- NULL
rs_joined$Source_Old <- NULL
rs_joined <- rs_joined %>% drop_na(Rank_New, Rank_Old)
rs_joined <- rs_joined %>% mutate(Rank_Change = floor(Rank_New-Rank_Old))
rs_joined <- rs_joined %>% arrange(Rank_Change)
#ANSWER
rs_joined$Year_Old_Decade <- rs_joined$Year_Old
rs_joined <- rs_joined %>% mutate(Year_Old_Decade = floor(Year_Old/10)*10, prefix = "s")
rs_joined$Year_Old_Decades <- paste0(rs_joined$Year_Old_Decade, rs_joined$prefix)
rs_joined$Year_New_Decade <- rs_joined$Year_New
rs_joined<- rs_joined %>% mutate(Year_New_Decade = floor(Year_New/10)*10)
rs_joined$Year_New_Decades <- paste0(rs_joined$Year_New_Decade, rs_joined$prefix)
rs_joined <- rs_joined %>% group_by(Year_New_Decades, Year_Old_Decades) %>% summarise_at(vars(Rank_Change), funs(mean(.,na.rm=TRUE)))
#ANSWER
?fct_count
fct_count(rs_joined$Year_New_Decades, sort = T)
fct_count(rs_joined$Year_Old_Decades, sort = T)
rs_joined <- rs_joined %>% mutate(Decade_New = fct_lump(Year_New_Decades, n=3,
other_level = "Other"))
rs_joined <- rs_joined %>% mutate(Decade_Old = fct_lump(Year_Old_Decades, n=3,
other_level = "Other"))
fct_count(rs_joined$Decade_New, prop = T)
fct_count(rs_joined$Decade_Old, prop = T)
#ANSWER
setwd()
top20 <- read.csv("top_20.csv", header = TRUE)
top20 <- tibble(top20)
top20 <- top20 %>% mutate(Release_Date_Parsed = parse_date_time(Release, "dmy"))
#ANSWER
top20 <- top20 %>% pivot_wider(names_from = Style, values_from = Value)
rs_joinedMerged <- left_join(top20, rs_joined, by = "Artist", "Song")
rs_joinedMerged$Month <- month(rs_joinedMerged$Release_Date_Parsed.x.x, label = TRUE)
rs_joinedMerged <- left_join(top20, rs_joined, by = "Artist", "Song")
rs_joinedMerged <- left_join(top20, rs_joined, by = "Artist", "Song")
rs_joined <- rs_joined %>% mutate(Decade_Old = fct_lump(Year_Old_Decades, n=3,
other_level = "Other"))
View(rs_joined)
rs_joinedMerged <- left_join(rs_joined, top20, by = "Artist", "Song")
rs_joinedMerged <- left_join(top20, rs_joined, by = "Artist", "Song")
View(rs_joined_orig)
View(rs_joined_orig_practice)
View(top20)
rs_joined <- rs_joined %>% mutate(Decade_New = fct_lump(Year_New_Decades, n=3,
other_level = "Other"))
rs_joined <- rs_joined %>% mutate(Decade_Old = fct_lump(Year_Old_Decades, n=3,
other_level = "Other"))
fct_count(rs_joined$Decade_New, prop = T)
fct_count(rs_joined$Decade_Old, prop = T)
#ANSWER
setwd()
setwd("C:/Users/Serena/Desktop/UCR Courses/PSYC 259/259-data-structure-hw")
#ANSWER
setwd()
setwd("C:/Users/Serena/Desktop/UCR Courses/PSYC 259/259-data-structure-hw")
top20 <- read.csv("top_20.csv", header = TRUE)
top20 <- tibble(top20)
top20 <- top20 %>% mutate(Release_Date_Parsed = parse_date_time(Release, "dmy"))
#ANSWER
top20 <- top20 %>% pivot_wider(names_from = Style, values_from = Value)
rs_joinedMerged <- left_join(top20, rs_joined, by = "Artist", "Song")
#ANSWER
fct_count(top20$Key, sort = TRUE)
rs_joinedMerged <- left_join(top20, rs_joined, by = "Artist", "Song")
View(rs_joined)
rs_joined$Year_New_Decades <- paste0(rs_joined$Year_New_Decade, rs_joined$prefix)
#ANSWER
rs_joined$Year_Old_Decade <- rs_joined$Year_Old
rs_joined <- rs_joined %>% mutate(Year_Old_Decade = floor(Year_Old/10)*10, prefix = "s")
#Load packages
library(tidyverse)
library(lubridate)
library(rvest)
# Scrape the data for the new rolling stone top 500 list
url <- "https://stuarte.co/2021/2021-full-list-rolling-stones-top-500-songs-of-all-time-updated/"
rs_new <- url %>% read_html() %>% html_nodes(xpath='//*[@id="post-14376"]/div[2]/div[2]/table') %>% html_table() %>% pluck(1)
# Scrape the data for the old rolling stone top 500 list
url_old <- "https://www.cs.ubc.ca/~davet/music/list/Best9.html"
rs_old <- url_old %>% read_html() %>% html_nodes(xpath='/html/body/table[2]') %>% html_table() %>% pluck(1) %>%
select(1, 4, 3, 7) %>% rename(Rank = X1, Artist = X3, Song = X4, Year = X7) %>% filter(Year != "YEAR")
#ANSWER
?full_join
##Does not allow for repeats. No matter how many different ranks are presented for that given artist/song.
rs_joined_orig_practice <- full_join(rs_old, rs_new, by = c("Artist", "Song"))
##Does allow for repeats. No matter how many different ranks are presented for that given artist/song.
rs_joined_orig <- full_join(rs_old, rs_new, by="Song", "Artist")
nrow(rs_joined_orig)
#ANSWER
rs_new_variable <- mutate(rs_new, Source = "New")
rs_old_variable <- mutate(rs_old, Source = "Old")
rs_all <- bind_rows(rs_new_variable, rs_old_variable)
rs_old_variable$Rank <- as.integer(rs_old_variable$Rank)
rs_old_variable$Year <- as.integer (rs_old_variable$Year)
rs_all <- bind_rows(rs_new_variable, rs_old_variable)
#ANSWER
?str_remove_all
library("stringr")
rs_all <- rs_all %>% mutate(Artist = str_remove_all(Artist, "The"))
rs_all <-rs_all %>% mutate(Song = str_remove_all(Song, "The"))
rs_all <- rs_all %>% mutate(Artist = str_replace_all(Artist, "[&]","and"))
rs_all <- rs_all %>% mutate(Song = str_replace_all(Song, "[&]","and"))
rs_all <- rs_all %>% mutate(Artist = str_remove_all(Artist, "[:punct:]"))
rs_all <- rs_all %>% mutate(Song = str_remove_all(Song, "[:punct:]"))
?str_trim
?str_to_lower
rs_all <- rs_all %>% mutate(Artist = str_to_lower (Artist))
rs_all <- rs_all %>% mutate(Artist = str_trim(Artist))
rs_all <- rs_all %>% mutate(Song = str_to_lower (Song))
rs_all <- rs_all %>% mutate(Song = str_trim(Song))
#ANSWER
rs_all_NEWdf <- split(rs_all, rs_all$Source)
first_Data <- rs_all_NEWdf[[1]]
second_Data <- rs_all_NEWdf[[2]]
rs_joined <- full_join(first_Data, second_Data, by="Artist", "Song")
rs_joined <- full_join(first_Data, second_Data, by = c ("Artist", "Song"), suffix = c("_Old","_New"))
nrow(rs_joined)
#ANSWER
rs_joined$Source_New <- NULL
rs_joined$Source_Old <- NULL
rs_joined <- rs_joined %>% drop_na(Rank_New, Rank_Old)
rs_joined <- rs_joined %>% mutate(Rank_Change = floor(Rank_New-Rank_Old))
rs_joined <- rs_joined %>% arrange(Rank_Change)
#ANSWER
rs_joined$Year_Old_Decade <- rs_joined$Year_Old
rs_joined <- rs_joined %>% mutate(Year_Old_Decade = floor(Year_Old/10)*10, prefix = "s")
rs_joined$Year_Old_Decades <- paste0(rs_joined$Year_Old_Decade, rs_joined$prefix)
rs_joined$Year_New_Decade <- rs_joined$Year_New
rs_joined<- rs_joined %>% mutate(Year_New_Decade = floor(Year_New/10)*10)
rs_joined$Year_New_Decades <- paste0(rs_joined$Year_New_Decade, rs_joined$prefix)
rs_joinedGrouped <- rs_joined %>% group_by(Year_New_Decades, Year_Old_Decades) %>% summarise_at(vars(Rank_Change), funs(mean(.,na.rm=TRUE)))
#ANSWER
?fct_count
fct_count(rs_joined$Year_New_Decades, sort = T)
fct_count(rs_joined$Year_Old_Decades, sort = T)
rs_joined <- rs_joined %>% mutate(Decade_New = fct_lump(Year_New_Decades, n=3,
other_level = "Other"))
rs_joined <- rs_joined %>% mutate(Decade_Old = fct_lump(Year_Old_Decades, n=3,
other_level = "Other"))
fct_count(rs_joined$Decade_New, prop = T)
fct_count(rs_joined$Decade_Old, prop = T)
#ANSWER
setwd()
top20 <- read.csv("top_20.csv", header = TRUE)
top20 <- tibble(top20)
top20 <- top20 %>% mutate(Release_Date_Parsed = parse_date_time(Release, "dmy"))
#ANSWER
top20 <- top20 %>% pivot_wider(names_from = Style, values_from = Value)
rs_joinedMerged <- left_join(top20, rs_joined, by = "Artist", "Song")
rs_joinedMerged$Month <- month(rs_joinedMerged$Release_Date_Parsed.x.x, label = TRUE)
rs_joined <- rs_joined %>% mutate(Decade_Old = fct_lump(Year_Old_Decades, n=3,
other_level = "Other"))
View(rs_joined)
setwd("C:/Users/Serena/Desktop/UCR Courses/PSYC 259/259-data-structure-hw")
top20 <- read.csv("top_20.csv", header = TRUE)
top20 <- tibble(top20)
top20 <- top20 %>% mutate(Release_Date_Parsed = parse_date_time(Release, "dmy"))
#ANSWER
top20 <- top20 %>% pivot_wider(names_from = Style, values_from = Value)
rs_joinedMerged <- left_join(top20, rs_joined, by = "Artist", "Song")
rs_joinedMerged$Month <- month(rs_joinedMerged$Release_Date_Parsed.x.x, label = TRUE)
rs_joinedMerged$Month <- month(rs_joinedMerged$Release_Date_Parsed.x.x, label = TRUE)
rs_joinedMerged <- left_join(top20, rs_joined, by = "Artist", "Song")
View(rs_joinedMerged)
rs_joinedMerged$Month <- month(rs_joinedMerged$Release_Date_Parsed, label = TRUE)
View(rs_joinedMerged)
rs_joinedMerged$Season<- rs_joinedMerged %>% mutate(rs_joinedMerged = fct_collapse(Month, Spring = c("Mar", "Apr", "May"),
Summer = c("Jun", "Jul", "Aug"), Fall = c("Sep", "Oct", "Nov"), Winter= c("Dec", "Jan", "Feb")))
View(rs_joinedMerged)
fct_count(rs_joinedMerged$Season, sort = TRUE)
fct_count(rs_joinedMerged$Season, sort = TRUE)
rs_joinedMerged$Season<- rs_joinedMerged %>% fct_count(Season, sort = TRUE)
rs_joinedMerged$Season <- as.factor(Season)
View(rs_joinedMerged)
rs_joinedMerged$Season <- rs_joinedMerged %>% mutate(rs_joinedMerged = fct_collapse(Month, Spring = c("Mar", "Apr", "May"),
Summer = c("Jun", "Jul", "Aug"), Fall = c("Sep", "Oct", "Nov"), Winter= c("Dec", "Jan", "Feb")))
View(rs_joinedMerged)
rs_joinedMerged <- left_join(top20, rs_joined, by = "Artist", "Song")
rs_joinedMerged$Month <- month(rs_joinedMerged$Release_Date_Parsed, label = TRUE)
View(rs_joinedMerged)
rs_joinedMerged$Season <- rs_joinedMerged %>% mutate(rs_joinedMerged = fct_collapse(Month, Spring = c("Mar", "Apr", "May"),
Summer = c("Jun", "Jul", "Aug"), Fall = c("Sep", "Oct", "Nov"), Winter= c("Dec", "Jan", "Feb")))
View(rs_joinedMerged)
rs_joinedMerged$Season <- mutate(rs_joinedMerged = fct_collapse(Month, Spring = c("Mar", "Apr", "May"),
Summer = c("Jun", "Jul", "Aug"), Fall = c("Sep", "Oct", "Nov"), Winter= c("Dec", "Jan", "Feb")))
rs_joinedMerged$Month <- month(rs_joinedMerged$Release_Date_Parsed, label = TRUE)
rs_joinedMerged$Season <- mutate(rs_joinedMerged = fct_collapse(rs_joinedMerged$Month, Spring = c("Mar", "Apr", "May"),
Summer = c("Jun", "Jul", "Aug"), Fall = c("Sep", "Oct", "Nov"), Winter= c("Dec", "Jan", "Feb")))
rs_joinedMerged$Season <- fct_collapse(Month, Spring = c("Mar", "Apr", "May"),
Summer = c("Jun", "Jul", "Aug"), Fall = c("Sep", "Oct", "Nov"), Winter= c("Dec", "Jan", "Feb"))
rs_joinedMerged <- left_join(top20, rs_joined, by = "Artist", "Song")
rs_joinedMerged$Month <- month(rs_joinedMerged$Release_Date_Parsed, label = TRUE)
rs_joinedMerged$Season <- fct_collapse(Month, Spring = c("Mar", "Apr", "May"),
Summer = c("Jun", "Jul", "Aug"), Fall = c("Sep", "Oct", "Nov"), Winter= c("Dec", "Jan", "Feb"))
rs_joinedMerged$Month <- month(rs_joinedMerged$Release_Date_Parsed, label = TRUE)
View(rs_joinedMerged)
rs_joinedMerged$Season <- fct_collapse(rs_joinedMerged$Month, Spring = c("Mar", "Apr", "May"),
Summer = c("Jun", "Jul", "Aug"), Fall = c("Sep", "Oct", "Nov"), Winter= c("Dec", "Jan", "Feb"))
View(rs_joinedMerged)
fct_count(rs_joinedMerged$Season, sort = TRUE)
#ANSWER
fct_count(top20$Key, sort = TRUE)
View(top20)
View(rs_joinedMerged)
rank(rs_joinedMerged$Song.x, rs_joinedMerged$Rank_Old)
rank(rs_joinedMerged$Song.x, ties.method = "high")
rank(rs_joinedMerged$Song.x, ties.method = "max")
rs_joinedMerged$Rank_New <- rank(rs_joinedMerged$Rank_New)
View(rs_joinedMerged)
View(rs_joinedMerged$Rank_New)
rs_joinedMerged$Song.x <- rank(rs_joinedMerged$Song.x)
View(rs_joinedMerged$Song.x)
rs_joinedMerged$Rank_New = rank(desc(rs_joinedMerged$Rank_New))
View(rs_joinedMerged)
rs_joinedMerged$Rank_New = rank(desc(rs_joinedMerged$Rank_New))
rs_joinedMerged
rs_joinedMerged
rs_joinedMerged$Rank_New = rank(rs_joinedMerged$Rank_New,na.last = TRUE,ties.method = "max")
rs_joinedMerged
rs_joinedMerged <- tibble(rs_joinedMerged)
View(rs_joinedMerged)
#Load packages
library(tidyverse)
library(lubridate)
library(rvest)
# Scrape the data for the new rolling stone top 500 list
url <- "https://stuarte.co/2021/2021-full-list-rolling-stones-top-500-songs-of-all-time-updated/"
rs_new <- url %>% read_html() %>% html_nodes(xpath='//*[@id="post-14376"]/div[2]/div[2]/table') %>% html_table() %>% pluck(1)
# Scrape the data for the old rolling stone top 500 list
url_old <- "https://www.cs.ubc.ca/~davet/music/list/Best9.html"
rs_old <- url_old %>% read_html() %>% html_nodes(xpath='/html/body/table[2]') %>% html_table() %>% pluck(1) %>%
select(1, 4, 3, 7) %>% rename(Rank = X1, Artist = X3, Song = X4, Year = X7) %>% filter(Year != "YEAR")
#ANSWER
?full_join
##Does not allow for repeats. No matter how many different ranks are presented for that given artist/song.
rs_joined_orig_practice <- full_join(rs_old, rs_new, by = c("Artist", "Song"))
##Does allow for repeats. No matter how many different ranks are presented for that given artist/song.
rs_joined_orig <- full_join(rs_old, rs_new, by="Song", "Artist")
nrow(rs_joined_orig)
#ANSWER
rs_new_variable <- mutate(rs_new, Source = "New")
rs_old_variable <- mutate(rs_old, Source = "Old")
rs_all <- bind_rows(rs_new_variable, rs_old_variable)
rs_old_variable$Rank <- as.integer(rs_old_variable$Rank)
rs_old_variable$Year <- as.integer (rs_old_variable$Year)
rs_all <- bind_rows(rs_new_variable, rs_old_variable)
#ANSWER
?str_remove_all
library("stringr")
rs_all <- rs_all %>% mutate(Artist = str_remove_all(Artist, "The"))
rs_all <-rs_all %>% mutate(Song = str_remove_all(Song, "The"))
rs_all <- rs_all %>% mutate(Artist = str_replace_all(Artist, "[&]","and"))
rs_all <- rs_all %>% mutate(Song = str_replace_all(Song, "[&]","and"))
rs_all <- rs_all %>% mutate(Artist = str_remove_all(Artist, "[:punct:]"))
rs_all <- rs_all %>% mutate(Song = str_remove_all(Song, "[:punct:]"))
?str_trim
?str_to_lower
rs_all <- rs_all %>% mutate(Artist = str_to_lower (Artist))
rs_all <- rs_all %>% mutate(Artist = str_trim(Artist))
rs_all <- rs_all %>% mutate(Song = str_to_lower (Song))
rs_all <- rs_all %>% mutate(Song = str_trim(Song))
#ANSWER
rs_all_NEWdf <- split(rs_all, rs_all$Source)
first_Data <- rs_all_NEWdf[[1]]
second_Data <- rs_all_NEWdf[[2]]
rs_joined <- full_join(first_Data, second_Data, by="Artist", "Song")
rs_joined <- full_join(first_Data, second_Data, by = c ("Artist", "Song"), suffix = c("_Old","_New"))
nrow(rs_joined)
#ANSWER
rs_joined$Source_New <- NULL
rs_joined$Source_Old <- NULL
rs_joined <- rs_joined %>% drop_na(Rank_New, Rank_Old)
rs_joined <- rs_joined %>% mutate(Rank_Change = floor(Rank_New-Rank_Old))
rs_joined <- rs_joined %>% arrange(Rank_Change)
#ANSWER
rs_joined$Year_Old_Decade <- rs_joined$Year_Old
rs_joined <- rs_joined %>% mutate(Year_Old_Decade = floor(Year_Old/10)*10, prefix = "s")
rs_joined$Year_Old_Decades <- paste0(rs_joined$Year_Old_Decade, rs_joined$prefix)
rs_joined$Year_New_Decade <- rs_joined$Year_New
rs_joined<- rs_joined %>% mutate(Year_New_Decade = floor(Year_New/10)*10)
rs_joined$Year_New_Decades <- paste0(rs_joined$Year_New_Decade, rs_joined$prefix)
rs_joinedGrouped <- rs_joined %>% group_by(Year_New_Decades, Year_Old_Decades) %>% summarise_at(vars(Rank_Change), funs(mean(.,na.rm=TRUE)))
#ANSWER
?fct_count
fct_count(rs_joined$Year_New_Decades, sort = T)
fct_count(rs_joined$Year_Old_Decades, sort = T)
rs_joined <- rs_joined %>% mutate(Decade_New = fct_lump(Year_New_Decades, n=3,
other_level = "Other"))
rs_joined <- rs_joined %>% mutate(Decade_Old = fct_lump(Year_Old_Decades, n=3,
other_level = "Other"))
fct_count(rs_joined$Decade_New, prop = T)
fct_count(rs_joined$Decade_Old, prop = T)
#ANSWER
setwd()
top20 <- read.csv("top_20.csv", header = TRUE)
top20 <- tibble(top20)
top20 <- top20 %>% mutate(Release_Date_Parsed = parse_date_time(Release, "dmy"))
#ANSWER
top20 <- top20 %>% pivot_wider(names_from = Style, values_from = Value)
rs_joinedMerged <- left_join(top20, rs_joined, by = "Artist", "Song")
rs_joinedMerged$Month <- month(rs_joinedMerged$Release_Date_Parsed, label = TRUE)
rs_joinedMerged$Season <- fct_collapse(rs_joinedMerged$Month, Spring = c("Mar", "Apr", "May"),
Summer = c("Jun", "Jul", "Aug"), Fall = c("Sep", "Oct", "Nov"), Winter= c("Dec", "Jan", "Feb"))
fct_count(rs_joinedMerged$Season, sort = TRUE)
#ANSWER
fct_count(top20$Key, sort = TRUE)
View(rs_joinedMerged)
rs_joinedMerged$TopRankedSong <- rank(rs_joinedMerged$Rank_New, ties.method = "max")
View(rs_joinedMerged)
rs_joinedMerged$TopRankedSong <- rank(rs_joinedMerged$Rank_New,rs_joinedMerged$Key, ties.method = "max")
View(rs_joinedMerged)
rs_joinedMerged$TopRankedSong <- rank(rs_joinedMerged$Rank_New, ties.method = "average")
View(rs_joinedMerged)
